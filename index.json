[
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/3-blogstranslated/3.1-blog1/",
	"title": "Blog 1",
	"tags": [],
	"description": "",
	"content": "Enhance Data Visibility with Cribl Search and Amazon Managed Grafana In today’s digital environment, organizations face challenges in managing the growing volume of operational data across their infrastructure—logs, metrics, and traces from applications and systems.\nThis information holds the key to deeper insights and performance improvement. However, to use it effectively, organizations need a scalable and customizable observability pipeline that can collect, process, and route data to the right destinations.\nCribl \u0026amp; Amazon Managed Grafana Cribl, an AWS APN partner, provides centralized data management and configurable routing solutions for large volumes of operational and security data.\nAmazon Managed Grafana is used to visualize data processed by Cribl, turning it into actionable dashboards with real-time insights.\nThe integration of Cribl Search with Amazon Managed Grafana enables more powerful monitoring and analysis, helping organizations make faster, more reliable, and large-scale data-driven decisions.\nKey Use Cases 1. Cloud infrastructure monitoring Cribl Search can query data from sources such as Amazon S3, Cribl Lake, Amazon Security Lake, or native AWS services through APIs, without requiring prior indexing. Results can then be sent via Cribl Stream to SIEM systems for analysis.\nGrafana is then used to build real-time dashboards showing resource usage, costs, and performance across AWS regions and related services.\n2. Application performance management Create application-specific dashboards: latency, error rates, user experience, with drill-down capabilities to analyze transactions in detail.\n3. Security operations Display security events via dedicated dashboards, improving incident response time and investigation. Cribl supports continuous monitoring of security events, compliance reporting, and enhanced threat detection.\nPrerequisites AWS account with administrative access Amazon S3 bucket (existing or newly created) and VPC Flow Logs with write access to the bucket Proper IAM configuration for users enabling flow logs Cribl Cloud account Implementation Steps 1. Configure API authentication Use API tokens to secure communication between Cribl and Amazon Managed Grafana. Access “API Credentials” in the Cribl dashboard to obtain Client ID, secret, etc.\n2. Install and configure the plugin Go to Amazon Managed Grafana \u0026gt; Plugins \u0026gt; “Add new connection” \u0026gt; search for “Cribl” plugin \u0026gt; add connection using Cribl details.\n3. Create your first visualization In Grafana, use the Query tab to run a sample query retrieving VPC Flow Logs from the last 15 minutes, grouped by log status every minute.\n4. Explore deeper with Table Search in Amazon Managed Grafana Switch from time-series chart to table view to see detailed log entries, identify anomalies, and trace requests. For example, query 1,000 records from a dataset to support investigations.\nCleanup and Cost Considerations Delete VPC Flow Logs and temporary S3 buckets when no longer needed. Remove unused Cribl configurations to avoid unnecessary costs. Conclusion The integration of Cribl and Amazon Managed Grafana creates a customizable observability pipeline that centralizes data management, enhances security and compliance, and provides visualized data to support actionable decisions. This solution is valuable for enterprises seeking large-scale observability that is future-ready.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/3-blogstranslated/3.2-blog2/",
	"title": "Blog 2",
	"tags": [],
	"description": "",
	"content": "Enabling customers to deliver production-ready AI agents at scale AI agents are ushering in a major technological revolution, similar to the birth of the Internet. AWS is committed to building the best platform for developing and deploying secure, reliable, and scalable AI agents. Real-world applications have demonstrated great potential in healthcare (AstraZeneca), finance (Yahoo Finance), and agriculture (Syngenta). To expand on this success, AWS is focused on providing tools and platforms that make it easy for organizations to move AI agents from prototype to production, with a focus on security, reliability, and adaptability over time.\nGuiding Principles for Agentic AI AWS structures its approach around four core principles:\nEmbrace Agility\nBuild systems that are flexible, modular, and able to evolve as models, capabilities, and requirements change. :contentReference[oaicite:3]{index=3}\nEvolve Fundamentals\nTailor core infrastructure elements for the agentic era, including:\nSecurity \u0026amp; Trust (session isolation, memory isolation) :contentReference[oaicite:4]{index=4} Reliability \u0026amp; Scalability (checkpointing, recovery, scaling to many concurrent sessions) :contentReference[oaicite:5]{index=5} Identity (fine-grained permissions, integrating with identity providers) :contentReference[oaicite:6]{index=6} Observability (real-time monitoring, telemetry) :contentReference[oaicite:7]{index=7} Data access \u0026amp; use, including integrating proprietary data securely :contentReference[oaicite:8]{index=8} Seamless Integration with existing tools, clouds, agents, APIs etc. :contentReference[oaicite:9]{index=9} Deliver Superior Outcomes with Model Choice \u0026amp; Data\nAllow customers to choose what model(s) fit their needs (reasoning, speed, cost, etc.). :contentReference[oaicite:10]{index=10} Provide tools for model customization: fine-tuning, alignment, pre/post training, etc. :contentReference[oaicite:11]{index=11} Introduce solutions like Amazon Nova customization (including PEFT, full fine-tuning, etc.) and Nova Act for browser-based agents. :contentReference[oaicite:12]{index=12} Introduce Amazon S3 Vectors for storing vector embeddings more cheaply while maintaining performance, enabling richer context and memory for agents. :contentReference[oaicite:13]{index=13} Deploy Solutions that Transform Experiences\nProvide pre-built agentic solutions and tools, so organizations don’t need to build everything from scratch. :contentReference[oaicite:14]{index=14} Use AWS Marketplace to access curated agents/tools. :contentReference[oaicite:15]{index=15} Examples: Kiro (IDE for spec-driven development), AWS Transform (agents for code analysis, modernization tasks), Amazon Connect with AI for customer interactions. :contentReference[oaicite:16]{index=16} New Capabilities \u0026amp; Announcements AgentCore: a set of services for deploying and operating agents at enterprise scale — with runtime, identity, observability, memory, browser, code interpreter tools, etc. :contentReference[oaicite:17]{index=17} Nova Customization in SageMaker AI: expanded capabilities for pre-training, fine-tuning, alignment using various techniques to customize models. :contentReference[oaicite:18]{index=18} Nova Act SDK: browser-automation-focused agents, currently in preview. :contentReference[oaicite:19]{index=19} S3 Vectors: native vector support in S3, reducing vector storage cost by ~90% while keeping low latency query. :contentReference[oaicite:20]{index=20} Marketplace Agents \u0026amp; Tools: curated catalog of agents \u0026amp; tools from AWS Partners, simpler procurement and deployment. :contentReference[oaicite:21]{index=21} Pre-built Solutions: tools like Kiro and AWS Transform to accelerate moving from concept to production. :contentReference[oaicite:22]{index=22} Recommendations \u0026amp; Path Forward Start now: pick a specific business problem to prototype. Don’t wait for perfect conditions. :contentReference[oaicite:23]{index=23} Collect real-world feedback and iterate quickly. :contentReference[oaicite:24]{index=24} AWS is investing heavily (e.g. Generative AI Innovation Center) to support customers. :contentReference[oaicite:25]{index=25} Conclusion AWS is laying down a comprehensive foundation to enable organizations to build, customize, secure, and scale AI agents. With new tools and services (AgentCore, Nova, S3 Vectors, etc.), the focus is on moving beyond experiments into production systems, ensuring trustworthiness, adaptability, and business value.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/3-blogstranslated/3.3-blog3/",
	"title": "Blog 3",
	"tags": [],
	"description": "",
	"content": "Goal-Oriented Growth: Driving AWS Marketplace Success with COSS Cloud marketplaces have evolved into a powerful channel for technology companies to reach customers. According to Canalys projections, by 2028, enterprise software sales via cloud marketplaces will reach $85 billion USD, with many organizations now using AWS Marketplace as their preferred procurement channel for software, data, and professional services. :contentReference[oaicite:0]{index=0}\nTo help partners succeed, AWS introduces the COSS (Characteristics of Successful Sellers) framework, comprising six pillars that embody strategic, business, and technical best practices. AWS research shows that partners who adopt the COSS framework tend to grow 31% faster in Marketplace sales compared to peers. :contentReference[oaicite:1]{index=1}\nAWS Partner Commitment to Marketplace Revenue A foundational pillar of the COSS framework is ensuring leadership commitment to AWS Marketplace revenue. Success starts at the top—executives must set explicit goals, signal priority, and align the entire organization around Marketplace growth. :contentReference[oaicite:2]{index=2}\nWhy this focus matters:\nOrganizational Alignment: Revenue goals help unify product, sales, marketing, and operations toward the same objectives. :contentReference[oaicite:3]{index=3} Resource Prioritization: When Marketplace revenue is an explicit target, teams are more willing to allocate budgets, headcount, and technical resources to support it. :contentReference[oaicite:4]{index=4} Accountability \u0026amp; Measurement: Clear goals transform Marketplace from a side channel into a core, measurable business initiative with defined ownership and metrics. :contentReference[oaicite:5]{index=5} Setting Goals Across Teams To turn top-level ambition into results, organizations should cascade output goals and input goals across functions:\nFunction / Team Example Goals \u0026amp; Actions Sales Integrate Marketplace targets into compensation plans; set quotas for deal size, win rates, and segment-specific deals via Marketplace. :contentReference[oaicite:6]{index=6} Operations / Enablement Define enablement targets for legal, finance, sales ops; automate private offer workflows; integrate Marketplace metrics into sales ops dashboards. :contentReference[oaicite:7]{index=7} Product / Marketing Optimize listings, drive traffic \u0026amp; conversion; build collateral, co-marketing plans; embrace product-led growth mechanisms. :contentReference[oaicite:8]{index=8} Training / Onboarding Embed Marketplace education into new hire programs; schedule recurring training sessions for sellers, operations, and cross-functional stakeholders. :contentReference[oaicite:9]{index=9} By aligning goals at all levels, you transform AWS Marketplace from an afterthought into a key growth engine.\nImplementation Steps \u0026amp; Best Practices Set a Defined Revenue Goal\nStart with a concrete target: a proportion of your total revenue you aim to transact through AWS Marketplace, or a growth rate target for your Marketplace business. :contentReference[oaicite:10]{index=10}\nDrive Organizational Alignment\nHold regular cross-functional working sessions; communicate the strategic importance of Marketplace; ensure all teams understand how they contribute. :contentReference[oaicite:11]{index=11}\nAlign Incentives\nEnsure your sales compensation plan includes explicit incentives tied to Marketplace sales. This helps motivate behavioral change. :contentReference[oaicite:12]{index=12}\nMonitor, Adjust, Celebrate\nUse metrics and dashboards to track performance, identify gaps, pivot where needed, and celebrate wins across teams to maintain momentum. :contentReference[oaicite:13]{index=13}\nPath Forward \u0026amp; Recommendations Begin now—choose a product or use case to pilot in the Marketplace, rather than waiting for perfect timing. :contentReference[oaicite:14]{index=14} Use early feedback and data to iterate quickly. Demonstrating real progress helps your leadership team maintain commitment and enables stronger co-sell relationships with AWS. Embed the COSS framework deeply in your operations, not as an afterthought but as a core business approach. Conclusion The AWS Marketplace opportunity is vast—but success requires intentionality. By committing to defined goals, aligning incentives, and applying rigorous practices across teams, partners can transform the Marketplace into a scalable, high-impact growth engine. With the COSS framework as your guide, the journey toward Marketplace excellence becomes clearer, measurable, and purposeful.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/3-blogstranslated/3.4-blog4/",
	"title": "Blog 4",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nGetting Started with Healthcare Data Lakes: Using Microservices Data lakes can help hospitals and healthcare facilities turn data into business insights, maintain business continuity, and protect patient privacy. A data lake is a centralized, managed, and secure repository to store all your data, both in its raw and processed forms for analysis. Data lakes allow you to break down data silos and combine different types of analytics to gain insights and make better business decisions.\nThis blog post is part of a larger series on getting started with setting up a healthcare data lake. In my final post of the series, “Getting Started with Healthcare Data Lakes: Diving into Amazon Cognito”, I focused on the specifics of using Amazon Cognito and Attribute Based Access Control (ABAC) to authenticate and authorize users in the healthcare data lake solution. In this blog, I detail how the solution evolved at a foundational level, including the design decisions I made and the additional features used. You can access the code samples for the solution in this Git repo for reference.\nArchitecture Guidance The main change since the last presentation of the overall architecture is the decomposition of a single service into a set of smaller services to improve maintainability and flexibility. Integrating a large volume of diverse healthcare data often requires specialized connectors for each format; by keeping them encapsulated separately as microservices, we can add, remove, and modify each connector without affecting the others. The microservices are loosely coupled via publish/subscribe messaging centered in what I call the “pub/sub hub.”\nThis solution represents what I would consider another reasonable sprint iteration from my last post. The scope is still limited to the ingestion and basic parsing of HL7v2 messages formatted in Encoding Rules 7 (ER7) through a REST interface.\nThe solution architecture is now as follows:\nFigure 1. Overall architecture; colored boxes represent distinct services.\nWhile the term microservices has some inherent ambiguity, certain traits are common:\nSmall, autonomous, loosely coupled Reusable, communicating through well-defined interfaces Specialized to do one thing well Often implemented in an event-driven architecture When determining where to draw boundaries between microservices, consider:\nIntrinsic: technology used, performance, reliability, scalability Extrinsic: dependent functionality, rate of change, reusability Human: team ownership, managing cognitive load Technology Choices and Communication Scope Communication scope Technologies / patterns to consider Within a single microservice Amazon Simple Queue Service (Amazon SQS), AWS Step Functions Between microservices in a single service AWS CloudFormation cross-stack references, Amazon Simple Notification Service (Amazon SNS) Between services Amazon EventBridge, AWS Cloud Map, Amazon API Gateway The Pub/Sub Hub Using a hub-and-spoke architecture (or message broker) works well with a small number of tightly related microservices.\nEach microservice depends only on the hub Inter-microservice connections are limited to the contents of the published message Reduces the number of synchronous calls since pub/sub is a one-way asynchronous push Drawback: coordination and monitoring are needed to avoid microservices processing the wrong message.\nCore Microservice Provides foundational data and communication layer, including:\nAmazon S3 bucket for data Amazon DynamoDB for data catalog AWS Lambda to write messages into the data lake and catalog Amazon SNS topic as the hub Amazon S3 bucket for artifacts such as Lambda code Only allow indirect write access to the data lake through a Lambda function → ensures consistency.\nFront Door Microservice Provides an API Gateway for external REST interaction Authentication \u0026amp; authorization based on OIDC via Amazon Cognito Self-managed deduplication mechanism using DynamoDB instead of SNS FIFO because: SNS deduplication TTL is only 5 minutes SNS FIFO requires SQS FIFO Ability to proactively notify the sender that the message is a duplicate Staging ER7 Microservice Lambda “trigger” subscribed to the pub/sub hub, filtering messages by attribute Step Functions Express Workflow to convert ER7 → JSON Two Lambdas: Fix ER7 formatting (newline, carriage return) Parsing logic Result or error is pushed back into the pub/sub hub New Features in the Solution 1. AWS CloudFormation Cross-Stack References Example outputs in the core microservice:\nOutputs: Bucket: Value: !Ref Bucket Export: Name: !Sub ${AWS::StackName}-Bucket ArtifactBucket: Value: !Ref ArtifactBucket Export: Name: !Sub ${AWS::StackName}-ArtifactBucket Topic: Value: !Ref Topic Export: Name: !Sub ${AWS::StackName}-Topic Catalog: Value: !Ref Catalog Export: Name: !Sub ${AWS::StackName}-Catalog CatalogArn: Value: !GetAtt Catalog.Arn Export: Name: !Sub ${AWS::StackName}-CatalogArn "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/3-blogstranslated/3.5-blog5/",
	"title": "Blog 5",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nGetting Started with Healthcare Data Lakes: Using Microservices Data lakes can help hospitals and healthcare facilities turn data into business insights, maintain business continuity, and protect patient privacy. A data lake is a centralized, managed, and secure repository to store all your data, both in its raw and processed forms for analysis. Data lakes allow you to break down data silos and combine different types of analytics to gain insights and make better business decisions.\nThis blog post is part of a larger series on getting started with setting up a healthcare data lake. In my final post of the series, “Getting Started with Healthcare Data Lakes: Diving into Amazon Cognito”, I focused on the specifics of using Amazon Cognito and Attribute Based Access Control (ABAC) to authenticate and authorize users in the healthcare data lake solution. In this blog, I detail how the solution evolved at a foundational level, including the design decisions I made and the additional features used. You can access the code samples for the solution in this Git repo for reference.\nArchitecture Guidance The main change since the last presentation of the overall architecture is the decomposition of a single service into a set of smaller services to improve maintainability and flexibility. Integrating a large volume of diverse healthcare data often requires specialized connectors for each format; by keeping them encapsulated separately as microservices, we can add, remove, and modify each connector without affecting the others. The microservices are loosely coupled via publish/subscribe messaging centered in what I call the “pub/sub hub.”\nThis solution represents what I would consider another reasonable sprint iteration from my last post. The scope is still limited to the ingestion and basic parsing of HL7v2 messages formatted in Encoding Rules 7 (ER7) through a REST interface.\nThe solution architecture is now as follows:\nFigure 1. Overall architecture; colored boxes represent distinct services.\nWhile the term microservices has some inherent ambiguity, certain traits are common:\nSmall, autonomous, loosely coupled Reusable, communicating through well-defined interfaces Specialized to do one thing well Often implemented in an event-driven architecture When determining where to draw boundaries between microservices, consider:\nIntrinsic: technology used, performance, reliability, scalability Extrinsic: dependent functionality, rate of change, reusability Human: team ownership, managing cognitive load Technology Choices and Communication Scope Communication scope Technologies / patterns to consider Within a single microservice Amazon Simple Queue Service (Amazon SQS), AWS Step Functions Between microservices in a single service AWS CloudFormation cross-stack references, Amazon Simple Notification Service (Amazon SNS) Between services Amazon EventBridge, AWS Cloud Map, Amazon API Gateway The Pub/Sub Hub Using a hub-and-spoke architecture (or message broker) works well with a small number of tightly related microservices.\nEach microservice depends only on the hub Inter-microservice connections are limited to the contents of the published message Reduces the number of synchronous calls since pub/sub is a one-way asynchronous push Drawback: coordination and monitoring are needed to avoid microservices processing the wrong message.\nCore Microservice Provides foundational data and communication layer, including:\nAmazon S3 bucket for data Amazon DynamoDB for data catalog AWS Lambda to write messages into the data lake and catalog Amazon SNS topic as the hub Amazon S3 bucket for artifacts such as Lambda code Only allow indirect write access to the data lake through a Lambda function → ensures consistency.\nFront Door Microservice Provides an API Gateway for external REST interaction Authentication \u0026amp; authorization based on OIDC via Amazon Cognito Self-managed deduplication mechanism using DynamoDB instead of SNS FIFO because: SNS deduplication TTL is only 5 minutes SNS FIFO requires SQS FIFO Ability to proactively notify the sender that the message is a duplicate Staging ER7 Microservice Lambda “trigger” subscribed to the pub/sub hub, filtering messages by attribute Step Functions Express Workflow to convert ER7 → JSON Two Lambdas: Fix ER7 formatting (newline, carriage return) Parsing logic Result or error is pushed back into the pub/sub hub New Features in the Solution 1. AWS CloudFormation Cross-Stack References Example outputs in the core microservice:\nOutputs: Bucket: Value: !Ref Bucket Export: Name: !Sub ${AWS::StackName}-Bucket ArtifactBucket: Value: !Ref ArtifactBucket Export: Name: !Sub ${AWS::StackName}-ArtifactBucket Topic: Value: !Ref Topic Export: Name: !Sub ${AWS::StackName}-Topic Catalog: Value: !Ref Catalog Export: Name: !Sub ${AWS::StackName}-Catalog CatalogArn: Value: !GetAtt Catalog.Arn Export: Name: !Sub ${AWS::StackName}-CatalogArn "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/3-blogstranslated/3.6-blog6/",
	"title": "Blog 6",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nGetting Started with Healthcare Data Lakes: Using Microservices Data lakes can help hospitals and healthcare facilities turn data into business insights, maintain business continuity, and protect patient privacy. A data lake is a centralized, managed, and secure repository to store all your data, both in its raw and processed forms for analysis. Data lakes allow you to break down data silos and combine different types of analytics to gain insights and make better business decisions.\nThis blog post is part of a larger series on getting started with setting up a healthcare data lake. In my final post of the series, “Getting Started with Healthcare Data Lakes: Diving into Amazon Cognito”, I focused on the specifics of using Amazon Cognito and Attribute Based Access Control (ABAC) to authenticate and authorize users in the healthcare data lake solution. In this blog, I detail how the solution evolved at a foundational level, including the design decisions I made and the additional features used. You can access the code samples for the solution in this Git repo for reference.\nArchitecture Guidance The main change since the last presentation of the overall architecture is the decomposition of a single service into a set of smaller services to improve maintainability and flexibility. Integrating a large volume of diverse healthcare data often requires specialized connectors for each format; by keeping them encapsulated separately as microservices, we can add, remove, and modify each connector without affecting the others. The microservices are loosely coupled via publish/subscribe messaging centered in what I call the “pub/sub hub.”\nThis solution represents what I would consider another reasonable sprint iteration from my last post. The scope is still limited to the ingestion and basic parsing of HL7v2 messages formatted in Encoding Rules 7 (ER7) through a REST interface.\nThe solution architecture is now as follows:\nFigure 1. Overall architecture; colored boxes represent distinct services.\nWhile the term microservices has some inherent ambiguity, certain traits are common:\nSmall, autonomous, loosely coupled Reusable, communicating through well-defined interfaces Specialized to do one thing well Often implemented in an event-driven architecture When determining where to draw boundaries between microservices, consider:\nIntrinsic: technology used, performance, reliability, scalability Extrinsic: dependent functionality, rate of change, reusability Human: team ownership, managing cognitive load Technology Choices and Communication Scope Communication scope Technologies / patterns to consider Within a single microservice Amazon Simple Queue Service (Amazon SQS), AWS Step Functions Between microservices in a single service AWS CloudFormation cross-stack references, Amazon Simple Notification Service (Amazon SNS) Between services Amazon EventBridge, AWS Cloud Map, Amazon API Gateway The Pub/Sub Hub Using a hub-and-spoke architecture (or message broker) works well with a small number of tightly related microservices.\nEach microservice depends only on the hub Inter-microservice connections are limited to the contents of the published message Reduces the number of synchronous calls since pub/sub is a one-way asynchronous push Drawback: coordination and monitoring are needed to avoid microservices processing the wrong message.\nCore Microservice Provides foundational data and communication layer, including:\nAmazon S3 bucket for data Amazon DynamoDB for data catalog AWS Lambda to write messages into the data lake and catalog Amazon SNS topic as the hub Amazon S3 bucket for artifacts such as Lambda code Only allow indirect write access to the data lake through a Lambda function → ensures consistency.\nFront Door Microservice Provides an API Gateway for external REST interaction Authentication \u0026amp; authorization based on OIDC via Amazon Cognito Self-managed deduplication mechanism using DynamoDB instead of SNS FIFO because: SNS deduplication TTL is only 5 minutes SNS FIFO requires SQS FIFO Ability to proactively notify the sender that the message is a duplicate Staging ER7 Microservice Lambda “trigger” subscribed to the pub/sub hub, filtering messages by attribute Step Functions Express Workflow to convert ER7 → JSON Two Lambdas: Fix ER7 formatting (newline, carriage return) Parsing logic Result or error is pushed back into the pub/sub hub New Features in the Solution 1. AWS CloudFormation Cross-Stack References Example outputs in the core microservice:\nOutputs: Bucket: Value: !Ref Bucket Export: Name: !Sub ${AWS::StackName}-Bucket ArtifactBucket: Value: !Ref ArtifactBucket Export: Name: !Sub ${AWS::StackName}-ArtifactBucket Topic: Value: !Ref Topic Export: Name: !Sub ${AWS::StackName}-Topic Catalog: Value: !Ref Catalog Export: Name: !Sub ${AWS::StackName}-Catalog CatalogArn: Value: !GetAtt Catalog.Arn Export: Name: !Sub ${AWS::StackName}-CatalogArn "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.3-s3-vpc/5.3.1-create-gwe/",
	"title": "Create a gateway endpoint",
	"tags": [],
	"description": "",
	"content": " Open the Amazon VPC console In the navigation pane, choose Endpoints, then click Create Endpoint: You will see 6 existing VPC endpoints that support AWS Systems Manager (SSM). These endpoints were deployed automatically by the CloudFormation Templates for this workshop.\nIn the Create endpoint console: Specify name of the endpoint: s3-gwe In service category, choose AWS services In Services, type s3 in the search box and choose the service with type gateway For VPC, select VPC Cloud from the drop-down. For Configure route tables, select the route table that is already associated with two subnets (note: this is not the main route table for the VPC, but a second route table created by CloudFormation). For Policy, leave the default option, Full Access, to allow full access to the service. You will deploy a VPC endpoint policy in a later lab module to demonstrate restricting access to S3 buckets based on policies. Do not add a tag to the VPC endpoint at this time. Click Create endpoint, then click x after receiving a successful creation message. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/4-eventparticipated/4.1-event1/",
	"title": "Event 1",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim into your report, including this warning.\nSummary Report: “GenAI-powered App-DB Modernization workshop” Event Objectives Share best practices in modern application design Introduce Domain-Driven Design (DDD) and event-driven architecture Provide guidance on selecting the right compute services Present AI tools to support the development lifecycle Speakers Jignesh Shah – Director, Open Source Databases Erica Liu – Sr. GTM Specialist, AppMod Fabrianne Effendi – Assc. Specialist SA, Serverless Amazon Web Services Key Highlights Identifying the drawbacks of legacy application architecture Long product release cycles → Lost revenue/missed opportunities Inefficient operations → Reduced productivity, higher costs Non-compliance with security regulations → Security breaches, loss of reputation Transitioning to modern application architecture – Microservices Migrating to a modular system — each function is an independent service communicating via events, built on three core pillars:\nQueue Management: Handle asynchronous tasks Caching Strategy: Optimize performance Message Handling: Flexible inter-service communication Domain-Driven Design (DDD) Four-step method: Identify domain events → arrange timeline → identify actors → define bounded contexts Bookstore case study: Demonstrates real-world DDD application Context mapping: 7 patterns for integrating bounded contexts Event-Driven Architecture 3 integration patterns: Publish/Subscribe, Point-to-point, Streaming Benefits: Loose coupling, scalability, resilience Sync vs async comparison: Understanding the trade-offs Compute Evolution Shared Responsibility Model: EC2 → ECS → Fargate → Lambda Serverless benefits: No server management, auto-scaling, pay-for-value Functions vs Containers: Criteria for appropriate choice Amazon Q Developer SDLC automation: From planning to maintenance Code transformation: Java upgrade, .NET modernization AWS Transform agents: VMware, Mainframe, .NET migration Key Takeaways Design Mindset Business-first approach: Always start from the business domain, not the technology Ubiquitous language: Importance of a shared vocabulary between business and tech teams Bounded contexts: Identifying and managing complexity in large systems Technical Architecture Event storming technique: Practical method for modeling business processes Use event-driven communication instead of synchronous calls Integration patterns: When to use sync, async, pub/sub, streaming Compute spectrum: Criteria for choosing between VM, containers, and serverless Modernization Strategy Phased approach: No rushing — follow a clear roadmap 7Rs framework: Multiple modernization paths depending on the application ROI measurement: Cost reduction + business agility Applying to Work Apply DDD to current projects: Event storming sessions with business teams Refactor microservices: Use bounded contexts to define service boundaries Implement event-driven patterns: Replace some sync calls with async messaging Adopt serverless: Pilot AWS Lambda for suitable use cases Try Amazon Q Developer: Integrate into the dev workflow to boost productivity Event Experience Attending the “GenAI-powered App-DB Modernization” workshop was extremely valuable, giving me a comprehensive view of modernizing applications and databases using advanced methods and tools. Key experiences included:\nLearning from highly skilled speakers Experts from AWS and major tech organizations shared best practices in modern application design. Through real-world case studies, I gained a deeper understanding of applying DDD and Event-Driven Architecture to large projects. Hands-on technical exposure Participating in event storming sessions helped me visualize how to model business processes into domain events. Learned how to split microservices and define bounded contexts to manage large-system complexity. Understood trade-offs between synchronous and asynchronous communication and integration patterns like pub/sub, point-to-point, streaming. Leveraging modern tools Explored Amazon Q Developer, an AI tool for SDLC support from planning to maintenance. Learned to automate code transformation and pilot serverless with AWS Lambda to improve productivity. Networking and discussions The workshop offered opportunities to exchange ideas with experts, peers, and business teams, enhancing the ubiquitous language between business and tech. Real-world examples reinforced the importance of the business-first approach rather than focusing solely on technology. Lessons learned Applying DDD and event-driven patterns reduces coupling while improving scalability and resilience. Modernization requires a phased approach with ROI measurement; rushing the process can be risky. AI tools like Amazon Q Developer can significantly boost productivity when integrated into the current workflow. Some event photos Add your event photos here\nOverall, the event not only provided technical knowledge but also helped me reshape my thinking about application design, system modernization, and cross-team collaboration.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/4-eventparticipated/4.2-event2/",
	"title": "Event 2",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim into your report, including this warning.\nSummary Report: “GenAI-powered App-DB Modernization workshop” Event Objectives Share best practices in modern application design Introduce Domain-Driven Design (DDD) and event-driven architecture Provide guidance on selecting the right compute services Present AI tools to support the development lifecycle Speakers Jignesh Shah – Director, Open Source Databases Erica Liu – Sr. GTM Specialist, AppMod Fabrianne Effendi – Assc. Specialist SA, Serverless Amazon Web Services Key Highlights Identifying the drawbacks of legacy application architecture Long product release cycles → Lost revenue/missed opportunities Inefficient operations → Reduced productivity, higher costs Non-compliance with security regulations → Security breaches, loss of reputation Transitioning to modern application architecture – Microservices Migrating to a modular system — each function is an independent service communicating via events, built on three core pillars:\nQueue Management: Handle asynchronous tasks Caching Strategy: Optimize performance Message Handling: Flexible inter-service communication Domain-Driven Design (DDD) Four-step method: Identify domain events → arrange timeline → identify actors → define bounded contexts Bookstore case study: Demonstrates real-world DDD application Context mapping: 7 patterns for integrating bounded contexts Event-Driven Architecture 3 integration patterns: Publish/Subscribe, Point-to-point, Streaming Benefits: Loose coupling, scalability, resilience Sync vs async comparison: Understanding the trade-offs Compute Evolution Shared Responsibility Model: EC2 → ECS → Fargate → Lambda Serverless benefits: No server management, auto-scaling, pay-for-value Functions vs Containers: Criteria for appropriate choice Amazon Q Developer SDLC automation: From planning to maintenance Code transformation: Java upgrade, .NET modernization AWS Transform agents: VMware, Mainframe, .NET migration Key Takeaways Design Mindset Business-first approach: Always start from the business domain, not the technology Ubiquitous language: Importance of a shared vocabulary between business and tech teams Bounded contexts: Identifying and managing complexity in large systems Technical Architecture Event storming technique: Practical method for modeling business processes Use event-driven communication instead of synchronous calls Integration patterns: When to use sync, async, pub/sub, streaming Compute spectrum: Criteria for choosing between VM, containers, and serverless Modernization Strategy Phased approach: No rushing — follow a clear roadmap 7Rs framework: Multiple modernization paths depending on the application ROI measurement: Cost reduction + business agility Applying to Work Apply DDD to current projects: Event storming sessions with business teams Refactor microservices: Use bounded contexts to define service boundaries Implement event-driven patterns: Replace some sync calls with async messaging Adopt serverless: Pilot AWS Lambda for suitable use cases Try Amazon Q Developer: Integrate into the dev workflow to boost productivity Event Experience Attending the “GenAI-powered App-DB Modernization” workshop was extremely valuable, giving me a comprehensive view of modernizing applications and databases using advanced methods and tools. Key experiences included:\nLearning from highly skilled speakers Experts from AWS and major tech organizations shared best practices in modern application design. Through real-world case studies, I gained a deeper understanding of applying DDD and Event-Driven Architecture to large projects. Hands-on technical exposure Participating in event storming sessions helped me visualize how to model business processes into domain events. Learned how to split microservices and define bounded contexts to manage large-system complexity. Understood trade-offs between synchronous and asynchronous communication and integration patterns like pub/sub, point-to-point, streaming. Leveraging modern tools Explored Amazon Q Developer, an AI tool for SDLC support from planning to maintenance. Learned to automate code transformation and pilot serverless with AWS Lambda to improve productivity. Networking and discussions The workshop offered opportunities to exchange ideas with experts, peers, and business teams, enhancing the ubiquitous language between business and tech. Real-world examples reinforced the importance of the business-first approach rather than focusing solely on technology. Lessons learned Applying DDD and event-driven patterns reduces coupling while improving scalability and resilience. Modernization requires a phased approach with ROI measurement; rushing the process can be risky. AI tools like Amazon Q Developer can significantly boost productivity when integrated into the current workflow. Some event photos Add your event photos here\nOverall, the event not only provided technical knowledge but also helped me reshape my thinking about application design, system modernization, and cross-team collaboration.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/",
	"title": "Internship Report",
	"tags": [],
	"description": "",
	"content": "Internship Report Student Information: Full Name: Đặng Đình Bắc\nPhone Number: 0352437611\nEmail: bacddse180351@fpt.edu.vn\nUniversity: FPTU HCM\nMajor: Software Engineer\nClass: AWS082025\nInternship Company: Amazon Web Services Vietnam Co., Ltd.\nInternship Position: FCJ Cloud Intern\nInternship Duration: From 09/09/2025 to 12/11/2025\nReport Content Worklog Proposal Translated Blogs Events Participated Workshop Self-evaluation Sharing and Feedback "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.1-workshop-overview/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "VPC endpoints VPC endpoints are virtual devices. They are horizontally scaled, redundant, and highly available VPC components. They allow communication between your compute resources and AWS services without imposing availability risks. Compute resources running in VPC can access Amazon S3 using a Gateway endpoint. PrivateLink interface endpoints can be used by compute resources running in VPC or on-premises. Workshop overview In this workshop, you will use two VPCs.\n\u0026ldquo;VPC Cloud\u0026rdquo; is for cloud resources such as a Gateway endpoint and an EC2 instance to test with. \u0026ldquo;VPC On-Prem\u0026rdquo; simulates an on-premises environment such as a factory or corporate datacenter. An EC2 instance running strongSwan VPN software has been deployed in \u0026ldquo;VPC On-prem\u0026rdquo; and automatically configured to establish a Site-to-Site VPN tunnel with AWS Transit Gateway. This VPN simulates connectivity from an on-premises location to the AWS cloud. To minimize costs, only one VPN instance is provisioned to support this workshop. When planning VPN connectivity for your production workloads, AWS recommends using multiple VPN devices for high availability. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.4-s3-onprem/5.4.1-prepare/",
	"title": "Prepare the environment",
	"tags": [],
	"description": "",
	"content": "To prepare for this part of the workshop you will need to:\nDeploying a CloudFormation stack Modifying a VPC route table. These components work together to simulate on-premises DNS forwarding and name resolution.\nDeploy the CloudFormation stack The CloudFormation template will create additional services to support an on-premises simulation:\nOne Route 53 Private Hosted Zone that hosts Alias records for the PrivateLink S3 endpoint One Route 53 Inbound Resolver endpoint that enables \u0026ldquo;VPC Cloud\u0026rdquo; to resolve inbound DNS resolution requests to the Private Hosted Zone One Route 53 Outbound Resolver endpoint that enables \u0026ldquo;VPC On-prem\u0026rdquo; to forward DNS requests for S3 to \u0026ldquo;VPC Cloud\u0026rdquo; Click the following link to open the AWS CloudFormation console. The required template will be pre-loaded into the menu. Accept all default and click Create stack. It may take a few minutes for stack deployment to complete. You can continue with the next step without waiting for the deployemnt to finish.\nUpdate on-premise private route table This workshop uses a strongSwan VPN running on an EC2 instance to simulate connectivty between an on-premises datacenter and the AWS cloud. Most of the required components are provisioned before your start. To finalize the VPN configuration, you will modify the \u0026ldquo;VPC On-prem\u0026rdquo; routing table to direct traffic destined for the cloud to the strongSwan VPN instance.\nOpen the Amazon EC2 console\nSelect the instance named infra-vpngw-test. From the Details tab, copy the Instance ID and paste this into your text editor\nNavigate to the VPC menu by using the Search box at the top of the browser window.\nClick on Route Tables, select the RT Private On-prem route table, select the Routes tab, and click Edit Routes.\nClick Add route. Destination: your Cloud VPC cidr range Target: ID of your infra-vpngw-test instance (you saved in your editor at step 1) Click Save changes "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.1-week1/",
	"title": "Week 1 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 1 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic Cloud computing and AWS service Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Get acquainted with FCJ members - Study Module 01-01: What is Cloud Computing? - Study Module 01-02: What Makes AWS Different? - Study Module 01-03: How to Start Your Cloud Journey. 09/08/2025 09/08/2025 https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 3 - Study Module 01-04: AWS Global Infrastructure - Study Module 01-05: AWS services management tools - Study Module 01-06: Optimizing Costs on AWS and Working with AWS Support - Understand AWS Regions, Availability Zones, core services (EC2, S3, RDS). 09/09/2025 09/09/2025 https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 4 - Study Module 01-07: Additional practice and research - Learn about AWS Free Tier, AWS Console, and AWS CLI. 09/10/2025 09/10/2025 https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 5 - Do Lab 01-01: Create an AWS account. - Practice: + Create AWS account + Configure billing settings, check Free Tier status. 09/11/2025 09/11/2025 https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 6 - Do Lab 01-02: Setup with Virtual MFA Device - Practice: + Setup with Virtual MFA Device - Learn what MFA is and why it’s important. 09/12/2025 09/12/2025 https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 7 - Do Lab 01-03: Create admin group and admin user. - Practice: + Create admin group and admin user - Explain the difference between the root account and IAM users 09/13/2025 09/13/2025 https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ Sun - Write Worklog Week 1 - Schedules tasks for week 2 - Start brainstorming ideas for the Project Proposal 09/14/2025 09/14/2025 https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ Week 1 Achievements: Get to know the members of FCJ Created a Free tier AWS account "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.2-week2/",
	"title": "Week 2 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 2 Objectives: Learn about VPC in AWS Tasks to be carried out this week: Day Task Start Date Completion Date Reference 2 - Learn about the concept of VPC - Module 02-01 - AWS Virtual Private Cloud 15/09/2025 15/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 3 - Learn about VPC Security and Multi-VPC features - Module 02-02 - VPC Security and Multi-VPC features 16/09/2025 16/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 4 - Learn about VPN, DirectConnect, LoadBalancer, and ExtraResources for connecting on-premise and cloud environments - Module 02-03 - VPN - DirectConnect - LoadBalancer - ExtraResources 17/09/2025 17/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 5 - Attend Vietnam Cloud Day 2025 - Start lab to create VPC 18/09/2025 18/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 6 - Perform lab to launch EC2 instance 19/09/2025 19/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 7 - Practice and repeat lab exercises 20/09/2025 20/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ Sun - Write weekly work journal for Week 2 - Plan study schedule for Week 3 21/09/2025 21/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ Week 2 Achievements: Gained fundamental understanding of VPC concepts (Module 02-01). Learned about VPC Security and Multi-VPC features (Module 02-02). Studied VPN, DirectConnect, LoadBalancer, and ExtraResources for hybrid connectivity (Module 02-03). Attended Vietnam Cloud Day 2025 and started hands-on lab to create a VPC. Successfully completed EC2 instance launch lab. Practiced and repeated lab exercises for better hands-on experience. Completed weekly journal and set learning reflection for Week 2. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.3-week3/",
	"title": "Week 3 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 3 Goals: Master the basic knowledge of Amazon EC2 services: instance types, AMI, Backup, Key Pair, EBS, Instance Store, User Data, Meta Data. Understand the operating mechanism and benefits of EC2 Auto Scaling, and have an overview of related services such as EFS, FSx, Lightsail, MGN. Tasks to be carried out this week: Day Task Start Date Completion Date References 2 - Learn about EC2 instance types and their functions - Module 03-01-01 - Amazon Elastic Compute Cloud (EC2) - Instance type 22/09/2025 22/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 3 - Understand AMI / Backup / Key Pair concepts and Elastic Block Store (EBS) - Module 03-01-02 - Amazon EC2 - AMI / Backup / Key Pair - Module 03-01-03 - Amazon EC2 - Elastic block store 23/09/2025 23/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 4 - Learn about important EC2 features such as Instance Store, User Data, Metadata - Module 03-01-04 - Amazon EC2 - Instance store - Module 03-01-05 - Amazon EC2 - User data - Module 03-01-06 - Amazon EC2 - Meta data 24/09/2025 24/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 5 - Study EC2 Auto Scaling and understand its structure - Module 03-01-07 - Amazon EC2 - EC2 auto scaling - Module 03-02 - EC2 Auto Scaling - EFS/FSx - Lightsail - MGN 25/09/2025 25/09/2025 https://cloudjourney.awsstudygroup.com/ https://www.youtube.com/watch?v=AQlsd0nWdZk\u0026list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026index=1/ 6 - Practice related lab exercises 26/09/2025 26/09/2025 https://cloudjourney.awsstudygroup.com/ 7 - Practice related lab exercises 27/09/2025 27/09/2025 https://cloudjourney.awsstudygroup.com/ Sun - Write the worklog for Week 3 - Prepare a study plan for Week 4 28/09/2025 28/09/2025 https://cloudjourney.awsstudygroup.com/ Achievements in Week 3: Gained a clear understanding of different EC2 instance types and their appropriate use cases. Mastered the concepts of AMI, Backup, Key Pair, and Elastic Block Store (EBS), including how to create and manage them. Became familiar with extended EC2 features: Instance Store, User Data, Metadata, and their practical applications. Understood the mechanism and benefits of EC2 Auto Scaling, along with an overview of related services such as EFS, FSx, Lightsail, and MGN. Completed several lab practices, reinforcing learned knowledge and improving hands-on skills with AWS Console \u0026amp; CLI. Successfully connected and interacted with members of the First Cloud Journey, building a foundation for group learning and collaboration. Wrote the worklog for Week 3 and created a study plan for Week 4. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.4-week4/",
	"title": "Week 4 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 4 Goals: Master knowledge about AWS storage services: types of services, data management, security, and performance optimization. Understand the operation of S3, Glacier, Snow Family, Storage Gateway, and Backup, and how to apply them in practice. Complete labs to reinforce knowledge and develop hands-on skills on AWS Console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date End Date Reference Materials Mon - Study Module 04-01 - AWS Storage Services 29/09/2025 29/09/2025 https://cloudjourney.awsstudygroup.com/ Tue - Study Module 04-02 - Amazon S3: Access Point, Storage Class 30/09/2025 30/09/2025 https://cloudjourney.awsstudygroup.com/ Wed - Study Module 04-03 - S3 Static Website \u0026amp; CORS, Control Access, Object Key \u0026amp; Performance, Glacier 01/10/2025 01/10/2025 https://cloudjourney.awsstudygroup.com/ Thu - Study Module 04-04 - Snow Family, Storage Gateway, Backup 02/10/2025 02/10/2025 https://cloudjourney.awsstudygroup.com/ Fri - Complete labs related to Module 04-01 ~ 04-04 03/10/2025 03/10/2025 https://cloudjourney.awsstudygroup.com/ Sat - Continue labs - Translate 1 related blog article 04/10/2025 04/10/2025 https://cloudjourney.awsstudygroup.com/ Sun - Translate 2 remaining blog articles - Write weekly worklog - Plan study tasks for Week 5 05/10/2025 05/10/2025 https://cloudjourney.awsstudygroup.com/ Week 4 Outcomes: Gained a clear understanding of AWS storage services, their functions, and practical applications. Mastered knowledge of Amazon S3: Access Point, Storage Class, Static Website, CORS, Object Key, Performance, Glacier. Became familiar with Snow Family, Storage Gateway, and Backup, and learned how to deploy and manage them. Completed hands-on labs, reinforcing skills on AWS Console \u0026amp; CLI. Successfully translated blog articles, improving reading comprehension and knowledge synthesis. Wrote the weekly worklog and planned study tasks for Week 5. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.5-week5/",
	"title": "Week 5 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 5 Objectives: Gain a solid understanding of AWS security and identity management services. Understand the Shared Responsibility Model and the division of responsibilities between AWS and customers. Learn and apply the concepts of IAM, Cognito, AWS Organization, Identity Center, KMS, and Security Hub for secure resource management. Practice hands-on labs and conduct additional research to strengthen AWS security skills. Complete the team project proposal by the end of the week. Tasks to be carried out this week: Day Task Start Date End Date Reference Source Mon - Study Module 05-01: Shared Responsibility Model 06/10/2025 06/10/2025 https://cloudjourney.awsstudygroup.com/ Tue - Study Module 05-02: Amazon Identity and Access Management (IAM) 07/10/2025 07/10/2025 https://cloudjourney.awsstudygroup.com/ Wed - Study Module 05-03: Amazon Cognito - Study Module 05-04: AWS Organization 08/10/2025 08/10/2025 https://cloudjourney.awsstudygroup.com/ Thu - Study Module 05-05: AWS Identity Center - Study Module 05-06: Amazon Key Management Service (KMS) 09/10/2025 09/10/2025 https://cloudjourney.awsstudygroup.com/ Fri - Study Module 05-07: AWS Security Hub - Study Module 05-08: Hands-on and Additional Research 10/10/2025 10/10/2025 https://cloudjourney.awsstudygroup.com/ Sat - Practice the related labs of week 5 11/10/2025 11/10/2025 https://cloudjourney.awsstudygroup.com/ Sun - Complete the Team Project Proposal - Write the Week 5 Worklog - Prepare the Week 6 Study Plan 12/10/2025 12/10/2025 https://cloudjourney.awsstudygroup.com/ Week 5 Achievements: Clearly understood the Shared Responsibility Model and the security responsibilities of both AWS and users. Mastered AWS IAM concepts: managing users, groups, roles, policies, MFA, and best practices. Gained experience with Amazon Cognito and AWS Identity Center for centralized user authentication and identity management. Learned how to organize and manage multiple accounts using AWS Organizations. Understood AWS KMS operations: key management, rotation, and encryption integration with other AWS services. Became familiar with AWS Security Hub to monitor and assess security posture. Completed hands-on labs and additional research to strengthen practical security skills. Finished the team project proposal, outlining ideas, scope, and implementation plan. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.6-week6/",
	"title": "Week 6 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 6 Objectives: Understand the architecture and operating principles of Microservice Architecture. Master how services communicate through gRPC and Apache Kafka. Review and consolidate knowledge to prepare for the midterm exam. Design a system architecture diagram for the group project, showing the communication flow between services. Tasks to be implemented this week: Day Task Start Date End Date Reference Mon - Review Monolithic architecture and compare it with Microservice\n- Learn basic principles of Microservice design 13/10/2025 13/10/2025 https://cloudjourney.awsstudygroup.com/ Tue - Learn gRPC: concept, operating mechanism, Protocol Buffers 14/10/2025 14/10/2025 https://cloudjourney.awsstudygroup.com/ Wed - Learn Apache Kafka 15/10/2025 15/10/2025 https://cloudjourney.awsstudygroup.com/ Thu - Learn how to integrate gRPC and Kafka in a microservice system 16/10/2025 16/10/2025 https://cloudjourney.awsstudygroup.com/ Fri - Review and summarize knowledge from week 1–6 17/10/2025 17/10/2025 https://cloudjourney.awsstudygroup.com/ Sat - Design system architecture diagram for the group project 18/10/2025 18/10/2025 https://cloudjourney.awsstudygroup.com/ Sun - Complete the system architecture diagram\n- Write week 6 work log 19/10/2025 19/10/2025 https://cloudjourney.awsstudygroup.com/ Week 6 Achievements: Clearly understand the difference between Monolithic and Microservice Architecture. Learn about gRPC and Kafka. Know how to integrate gRPC and Kafka in a microservice system. Complete the group project system architecture diagram. Be ready for the midterm exam. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.7-week7/",
	"title": "Week 7 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 7 Objectives: Learn about AWS Lambda. Learn about the AWS CLI and how to deploy a Java function to Lambda using the AWS CLI. Understand how API Gateway and Lambda work together. 1 Tasks to be implemented this week: Day Task Start Date Completion Date Resources Mon - Get an overview of AWS Lambda: concepts, architecture, advantages of the serverless model, and how Lambda executes code. 20/10/2025 20/10/2025 https://cloudjourney.awsstudygroup.com/ Tue - Study the AWS CLI: its functions, how to install and configure access to an AWS account using an IAM User; learn the syntax of basic commands. 21/10/2025 21/10/2025 https://cloudjourney.awsstudygroup.com/ Wed - Practice installing the AWS CLI on a personal machine, configuring credentials, and testing some resource management commands (S3, EC2, Lambda). 22/10/2025 22/10/2025 https://cloudjourney.awsstudygroup.com/ Thu - Learn the process of deploying a Java Function to AWS Lambda: preparing a Maven project, packaging a .jar file, creating and uploading the function using the AWS CLI. 23/10/2025 23/10/2025 https://cloudjourney.awsstudygroup.com/ Fri - Practice deploying a Java Function to Lambda using the AWS CLI, assigning the appropriate IAM role, and testing the function\u0026rsquo;s operation. 24/10/2025 24/10/2025 https://cloudjourney.awsstudygroup.com/ Sat - Understand how API Gateway connects with AWS Lambda to build a backend API; configure endpoints and test API calls. 25/10/2025 25/10/2025 https://cloudjourney.awsstudygroup.com/ Sun - Consolidate learned knowledge: the relationship between Lambda – API Gateway – AWS CLI, document the deployment process, and prepare the weekly report. - Write the work log for week 6. 26/10/2025 26/10/2025 https://cloudjourney.awsstudygroup.com/ Week 7 Achievements: 1. Clear Understanding of AWS Lambda Grasped the concept and role of AWS Lambda in the serverless model. Understood Lambda\u0026rsquo;s operational mechanism: the trigger process, function execution, and returning results. Distinguished the differences between Lambda and EC2 regarding: Infrastructure Management Usage Costs Scalability and Flexibility. 2. Proficiency in Using the AWS CLI Successfully installed and configured the AWS CLI on a personal machine using an IAM User. Practiced basic commands: Listing S3 buckets. Creating and viewing information for a Lambda function. Managing basic resources on AWS. Understood how the AWS CLI sends API requests and the authentication mechanism using Access Key/Secret Key. 3. Practical Experience Deploying a Java Function to AWS Lambda via AWS CLI Built a Java project using Maven, created a handler class, and packaged it into a .jar file. Used the aws lambda create-function command to upload and deploy the function. Assigned an appropriate IAM Role to grant the Lambda function execution permissions. Tested the function\u0026rsquo;s operation with the command: "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.8-week8/",
	"title": "Week 8 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 8 Objectives: Complete the group proposal. Review key concepts in preparation for the midterm exam. Strengthen missing or unclear knowledge areas. Tasks Planned for This Week: Day Task Start Date Completion Date Reference Material 2 - Complete the group proposal.\n- Review security design concepts: + IAM, MFA, SCP, Encryption (KMS, TLS/ACM), Security Groups, NACLs, GuardDuty, Shield, WAF, Secrets Manager 27/10/2025 27/10/2025 https://cloudjourney.awsstudygroup.com/ 3 - Review how to design resilient and highly available architectures: + Multi-AZ, Multi-Region, DR Strategies, Auto Scaling, Route 53, Load Balancing, Backup \u0026amp; Restore 28/10/2025 28/10/2025 https://cloudjourney.awsstudygroup.com/ 4 - Review high-performance system design concepts: + EC2 Auto Scaling, Lambda, Fargate, S3, EFS, EBS, Caching, CloudFront, Global Accelerator 29/10/2025 29/10/2025 https://cloudjourney.awsstudygroup.com/ 5 - Review cost optimization strategies: + Cost Explorer, Budgets, Savings Plans, Lifecycle Policies, NAT Gateway Optimization, Storage Tiering 30/10/2025 30/10/2025 https://cloudjourney.awsstudygroup.com/ 6 - Participate in the FCJ midterm assessment. 31/10/2025 31/10/2025 https://cloudjourney.awsstudygroup.com/ Results Achieved in Week 8: Completed the group proposal with clear content, logical structure, and alignment with the project requirements. Reviewed and reinforced knowledge of AWS security design, including IAM, MFA, SCP, Encryption (KMS, TLS/ACM), Security Groups, NACLs, GuardDuty, Shield, WAF, and Secrets Manager. Gained a solid understanding of resilient and highly available architecture design principles, emphasizing the use of Multi-AZ, Multi-Region, DR Strategies, Auto Scaling, Route 53, Load Balancing, and Backup \u0026amp; Restore to enhance system availability and recovery. Strengthened knowledge of high-performance system design, particularly in leveraging EC2 Auto Scaling, Lambda, Fargate, S3, EFS, EBS, Caching, CloudFront, and Global Accelerator to optimize system performance and content delivery. Improved understanding of cost optimization in AWS, including the use of Cost Explorer, Budgets, Savings Plans, Lifecycle Policies, NAT Gateway Optimization, and Storage Tiering. Successfully completed the FCJ midterm assessment, effectively applying the knowledge gained during the week’s review. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.9-week9/",
	"title": "Week 9 Worklog",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 9 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Get acquainted with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ Week 9 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/",
	"title": "Worklog",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nOn this page, you will need to introduce your worklog. How did you complete it? How many weeks did you take to complete the program? What did you do in those weeks?\nTypically, and as a standard, a worklog is carried out over about 3 months (throughout the internship period) with weekly contents as follows:\nWeek 1: Getting familiar with AWS and basic AWS services\nWeek 2: Doing task A\u0026hellip;\nWeek 3: Doing task B\u0026hellip;\nWeek 4: Doing task C\u0026hellip;\nWeek 5: Doing task D\u0026hellip;\nWeek 6: Doing task E\u0026hellip;\nWeek 7: Doing task G\u0026hellip;\nWeek 8: Doing task H\u0026hellip;\nWeek 9: Doing task I\u0026hellip;\nWeek 10: Doing task L\u0026hellip;\nWeek 11: Doing task M\u0026hellip;\nWeek 12: Doing task N\u0026hellip;\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.4-s3-onprem/5.4.2-create-interface-enpoint/",
	"title": "Create an S3 Interface endpoint",
	"tags": [],
	"description": "",
	"content": "In this section you will create and test an S3 interface endpoint using the simulated on-premises environment deployed as part of this workshop.\nReturn to the Amazon VPC menu. In the navigation pane, choose Endpoints, then click Create Endpoint.\nIn Create endpoint console:\nName the interface endpoint In Service category, choose aws services In the Search box, type S3 and press Enter. Select the endpoint named com.amazonaws.us-east-1.s3. Ensure that the Type column indicates Interface. For VPC, select VPC Cloud from the drop-down. Make sure to choose \u0026ldquo;VPC Cloud\u0026rdquo; and not \u0026ldquo;VPC On-prem\u0026rdquo;\nExpand Additional settings and ensure that Enable DNS name is not selected (we will use this in the next part of the workshop) Select 2 subnets in the following AZs: us-east-1a and us-east-1b For Security group, choose SGforS3Endpoint: Keep the default policy - full access and click Create endpoint Congratulation on successfully creating S3 interface endpoint. In the next step, we will test the interface endpoint.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.2-prerequiste/",
	"title": "Prerequiste",
	"tags": [],
	"description": "",
	"content": "IAM permissions Add the following IAM permission policy to your user account to deploy and cleanup this workshop.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudformation:*\u0026#34;, \u0026#34;cloudwatch:*\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:AllocateAddress\u0026#34;, \u0026#34;ec2:AssociateAddress\u0026#34;, \u0026#34;ec2:AssociateIamInstanceProfile\u0026#34;, \u0026#34;ec2:AssociateRouteTable\u0026#34;, \u0026#34;ec2:AssociateSubnetCidrBlock\u0026#34;, \u0026#34;ec2:AssociateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:AssociateVpcCidrBlock\u0026#34;, \u0026#34;ec2:AttachInternetGateway\u0026#34;, \u0026#34;ec2:AttachNetworkInterface\u0026#34;, \u0026#34;ec2:AttachVolume\u0026#34;, \u0026#34;ec2:AttachVpnGateway\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:CreateClientVpnEndpoint\u0026#34;, \u0026#34;ec2:CreateClientVpnRoute\u0026#34;, \u0026#34;ec2:CreateCustomerGateway\u0026#34;, \u0026#34;ec2:CreateDhcpOptions\u0026#34;, \u0026#34;ec2:CreateFlowLogs\u0026#34;, \u0026#34;ec2:CreateInternetGateway\u0026#34;, \u0026#34;ec2:CreateLaunchTemplate\u0026#34;, \u0026#34;ec2:CreateNetworkAcl\u0026#34;, \u0026#34;ec2:CreateNetworkInterface\u0026#34;, \u0026#34;ec2:CreateNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:CreateRoute\u0026#34;, \u0026#34;ec2:CreateRouteTable\u0026#34;, \u0026#34;ec2:CreateSecurityGroup\u0026#34;, \u0026#34;ec2:CreateSubnet\u0026#34;, \u0026#34;ec2:CreateSubnetCidrReservation\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34;, \u0026#34;ec2:CreateTransitGateway\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRoute\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:CreateTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:CreateVpc\u0026#34;, \u0026#34;ec2:CreateVpcEndpoint\u0026#34;, \u0026#34;ec2:CreateVpcEndpointConnectionNotification\u0026#34;, \u0026#34;ec2:CreateVpcEndpointServiceConfiguration\u0026#34;, \u0026#34;ec2:CreateVpnConnection\u0026#34;, \u0026#34;ec2:CreateVpnConnectionRoute\u0026#34;, \u0026#34;ec2:CreateVpnGateway\u0026#34;, \u0026#34;ec2:DeleteCustomerGateway\u0026#34;, \u0026#34;ec2:DeleteFlowLogs\u0026#34;, \u0026#34;ec2:DeleteInternetGateway\u0026#34;, \u0026#34;ec2:DeleteNetworkInterface\u0026#34;, \u0026#34;ec2:DeleteNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:DeleteRoute\u0026#34;, \u0026#34;ec2:DeleteRouteTable\u0026#34;, \u0026#34;ec2:DeleteSecurityGroup\u0026#34;, \u0026#34;ec2:DeleteSubnet\u0026#34;, \u0026#34;ec2:DeleteSubnetCidrReservation\u0026#34;, \u0026#34;ec2:DeleteTags\u0026#34;, \u0026#34;ec2:DeleteTransitGateway\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRoute\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:DeleteVpc\u0026#34;, \u0026#34;ec2:DeleteVpcEndpoints\u0026#34;, \u0026#34;ec2:DeleteVpcEndpointServiceConfigurations\u0026#34;, \u0026#34;ec2:DeleteVpnConnection\u0026#34;, \u0026#34;ec2:DeleteVpnConnectionRoute\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:DetachInternetGateway\u0026#34;, \u0026#34;ec2:DisassociateAddress\u0026#34;, \u0026#34;ec2:DisassociateRouteTable\u0026#34;, \u0026#34;ec2:GetLaunchTemplateData\u0026#34;, \u0026#34;ec2:GetTransitGatewayAttachmentPropagations\u0026#34;, \u0026#34;ec2:ModifyInstanceAttribute\u0026#34;, \u0026#34;ec2:ModifySecurityGroupRules\u0026#34;, \u0026#34;ec2:ModifyTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:ModifyVpcAttribute\u0026#34;, \u0026#34;ec2:ModifyVpcEndpoint\u0026#34;, \u0026#34;ec2:ReleaseAddress\u0026#34;, \u0026#34;ec2:ReplaceRoute\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:RunInstances\u0026#34;, \u0026#34;ec2:StartInstances\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsEgress\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsIngress\u0026#34;, \u0026#34;iam:AddRoleToInstanceProfile\u0026#34;, \u0026#34;iam:AttachRolePolicy\u0026#34;, \u0026#34;iam:CreateInstanceProfile\u0026#34;, \u0026#34;iam:CreatePolicy\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:DeleteInstanceProfile\u0026#34;, \u0026#34;iam:DeletePolicy\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;iam:DetachRolePolicy\u0026#34;, \u0026#34;iam:GetInstanceProfile\u0026#34;, \u0026#34;iam:GetPolicy\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetRolePolicy\u0026#34;, \u0026#34;iam:ListPolicyVersions\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:PassRole\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:RemoveRoleFromInstanceProfile\u0026#34;, \u0026#34;lambda:CreateFunction\u0026#34;, \u0026#34;lambda:DeleteFunction\u0026#34;, \u0026#34;lambda:DeleteLayerVersion\u0026#34;, \u0026#34;lambda:GetFunction\u0026#34;, \u0026#34;lambda:GetLayerVersion\u0026#34;, \u0026#34;lambda:InvokeFunction\u0026#34;, \u0026#34;lambda:PublishLayerVersion\u0026#34;, \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:DeleteLogGroup\u0026#34;, \u0026#34;logs:DescribeLogGroups\u0026#34;, \u0026#34;logs:PutRetentionPolicy\u0026#34;, \u0026#34;route53:ChangeTagsForResource\u0026#34;, \u0026#34;route53:CreateHealthCheck\u0026#34;, \u0026#34;route53:CreateHostedZone\u0026#34;, \u0026#34;route53:CreateTrafficPolicy\u0026#34;, \u0026#34;route53:DeleteHostedZone\u0026#34;, \u0026#34;route53:DisassociateVPCFromHostedZone\u0026#34;, \u0026#34;route53:GetHostedZone\u0026#34;, \u0026#34;route53:ListHostedZones\u0026#34;, \u0026#34;route53domains:ListDomains\u0026#34;, \u0026#34;route53domains:ListOperations\u0026#34;, \u0026#34;route53domains:ListTagsForDomain\u0026#34;, \u0026#34;route53resolver:AssociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:AssociateResolverRule\u0026#34;, \u0026#34;route53resolver:CreateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:CreateResolverRule\u0026#34;, \u0026#34;route53resolver:DeleteResolverEndpoint\u0026#34;, \u0026#34;route53resolver:DeleteResolverRule\u0026#34;, \u0026#34;route53resolver:DisassociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:DisassociateResolverRule\u0026#34;, \u0026#34;route53resolver:GetResolverEndpoint\u0026#34;, \u0026#34;route53resolver:GetResolverRule\u0026#34;, \u0026#34;route53resolver:ListResolverEndpointIpAddresses\u0026#34;, \u0026#34;route53resolver:ListResolverEndpoints\u0026#34;, \u0026#34;route53resolver:ListResolverRuleAssociations\u0026#34;, \u0026#34;route53resolver:ListResolverRules\u0026#34;, \u0026#34;route53resolver:ListTagsForResource\u0026#34;, \u0026#34;route53resolver:UpdateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:UpdateResolverRule\u0026#34;, \u0026#34;s3:AbortMultipartUpload\u0026#34;, \u0026#34;s3:CreateBucket\u0026#34;, \u0026#34;s3:DeleteBucket\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34;, \u0026#34;s3:GetAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:GetBucketAcl\u0026#34;, \u0026#34;s3:GetBucketOwnershipControls\u0026#34;, \u0026#34;s3:GetBucketPolicy\u0026#34;, \u0026#34;s3:GetBucketPolicyStatus\u0026#34;, \u0026#34;s3:GetBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:GetObjectVersion\u0026#34;, \u0026#34;s3:GetBucketVersioning\u0026#34;, \u0026#34;s3:ListAccessPoints\u0026#34;, \u0026#34;s3:ListAccessPointsForObjectLambda\u0026#34;, \u0026#34;s3:ListAllMyBuckets\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:ListBucketMultipartUploads\u0026#34;, \u0026#34;s3:ListBucketVersions\u0026#34;, \u0026#34;s3:ListJobs\u0026#34;, \u0026#34;s3:ListMultipartUploadParts\u0026#34;, \u0026#34;s3:ListMultiRegionAccessPoints\u0026#34;, \u0026#34;s3:ListStorageLensConfigurations\u0026#34;, \u0026#34;s3:PutAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:PutBucketAcl\u0026#34;, \u0026#34;s3:PutBucketPolicy\u0026#34;, \u0026#34;s3:PutBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:PutObject\u0026#34;, \u0026#34;secretsmanager:CreateSecret\u0026#34;, \u0026#34;secretsmanager:DeleteSecret\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;secretsmanager:ListSecrets\u0026#34;, \u0026#34;secretsmanager:ListSecretVersionIds\u0026#34;, \u0026#34;secretsmanager:PutResourcePolicy\u0026#34;, \u0026#34;secretsmanager:TagResource\u0026#34;, \u0026#34;secretsmanager:UpdateSecret\u0026#34;, \u0026#34;sns:ListTopics\u0026#34;, \u0026#34;ssm:DescribeInstanceProperties\u0026#34;, \u0026#34;ssm:DescribeSessions\u0026#34;, \u0026#34;ssm:GetConnectionStatus\u0026#34;, \u0026#34;ssm:GetParameters\u0026#34;, \u0026#34;ssm:ListAssociations\u0026#34;, \u0026#34;ssm:ResumeSession\u0026#34;, \u0026#34;ssm:StartSession\u0026#34;, \u0026#34;ssm:TerminateSession\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Provision resources using CloudFormation In this lab, we will use N.Virginia region (us-east-1).\nTo prepare the workshop environment, deploy this CloudFormation Template (click link): PrivateLinkWorkshop . Accept all of the defaults when deploying the template.\nTick 2 acknowledgement boxes Choose Create stack The ClouddFormation deployment requires about 15 minutes to complete.\n2 VPCs have been created 3 EC2s have been created "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/2-proposal/",
	"title": "Proposal",
	"tags": [],
	"description": "",
	"content": "IoT-Based Alcohol Violation Detection System A Secure AWS Serverless Solution with Biometric Authentication and DevSecOps 1. Executive Summary This project develops a comprehensive IoT–Cloud platform to monitor and record alcohol concentration violations.\nThe system is composed of two major components:\nDedicated Edge Device: Used by authorized officers, requiring fingerprint (hybrid) authentication before operation. The fingerprint SlotID is verified against a data pool (DynamoDB) on the cloud to unlock the device. Public Web Portal: A web interface that allows anyone to view dashboards and search for their violation history using National ID (CCCD). The backend is fully serverless. The frontend CI/CD workflow is automated using AWS Amplify, while backend infrastructure is managed using Terraform (IaC) and deployed through AWS CodePipeline, following DevSecOps best practices.\n2. Context and Solution The Problem The current manual inspection process contains several critical weaknesses in terms of authentication, transparency, and data management.\nLack of Accountability: The system does not have any mechanism to verify the identity of the operating personnel (who conducted the inspection?). This leads to potential misuse of equipment, procedural errors, and a lack of responsibility when incidents or complaints occur. Lack of Transparency: Citizens who have undergone an inspection have no official, fast, and reliable channel to verify or review their violation records. Fragmented and Unsearchable Data: Violation data (if recorded) is often stored in scattered logbooks or separate Excel files, without centralized management. This makes it nearly impossible—or extremely time-consuming—to look up a person’s violation history (e.g., by national ID number). As a result, it wastes resources and undermines public trust. Proposed Solution This system provides a secure, transparent, and automated enforcement platform by:\nOperator Authentication: Using fingerprint sensors integrated with AWS IoT Core to ensure only authorized personnel can unlock the device. Auditing: Every violation is automatically tagged with the operator’s ID for accountability. Centralized Data Management: Violation data is transmitted via IoT Core, processed by AWS Lambda, and stored in DynamoDB. Public Lookup Portal: A public website built with Amplify + CloudFront, with all API endpoints protected by AWS WAF. Automated CI/CD Pipelines: Frontend CI/CD using Amplify (connected to GitHub). Backend CI/CD using CodePipeline and Terraform. Key Benefits:\nImproved transparency and reduced human error. Fast deployment with low operational cost (~14–16 USD/month). Fully compliant with DevSecOps standards. 3. Solution Architecture AWS Services Used Category Service Purpose IoT \u0026amp; Ingestion AWS IoT Core Receive and route data from IoT devices Compute AWS Lambda 4 functions: Authorize, ProcessViolation, GetDashboard, SearchByCCCD Database Amazon DynamoDB 2 tables: DeviceOfficerMap_Pool, ViolationsDB (2 GSIs) API Amazon API Gateway Provide public REST endpoints Security AWS WAF Protect API and web endpoints Frontend Hosting S3 + CloudFront + Route 53 Host and distribute the website Frontend Framework AWS Amplify Automate frontend CI/CD Backend DevOps CodePipeline + CodeBuild + Terraform Automate IaC deployment Monitoring CloudWatch System monitoring and alerting Hardware Components (Edge) ESP32, MQ-3 (Alcohol Sensor) MAX30102 (Heart Rate / Oxygen Sensor) AS608 (Fingerprint Sensor) 4x4 Keypad, LCD 1602 Display Main Processing Flow Authentication (Hybrid): Officer scans fingerprint → SlotID sent via auth/request → IoT Core → Lambda AuthorizeFunction → Query DynamoDB → Return unlock/deny. Violation Recording: Once unlocked → Measure alcohol level → If exceeded → Input CCCD → Send violations/new → IoT Core → Lambda ProcessViolationFunction → Save to DynamoDB. Public Web Interface: SPA (React/Vue) using Amplify libraries communicates with API Gateway. 4. Technical Implementation Plan Phase Duration Key Tasks Design \u0026amp; IaC Week 1–2 Finalize architecture, write Terraform scripts Firmware (ESP32) Week 3–4 Implement authentication and violation reporting Backend Week 5–7 Develop Lambda functions, IoT Core, and API Gateway Frontend Week 8–9 Build the web UI with React + Amplify CI/CD \u0026amp; Security Week 10–12 Configure pipelines, WAF, and CloudWatch monitoring 5. Timeline \u0026amp; Milestones Month Phase Milestone First month Design + Firmware ESP32 authenticates officers and sends sample violations Second month Backend + API Functional API responding via browser Third month Frontend + CI/CD Public website live with automated deployment 6. Estimated Monthly Budget AWS service: Service Cost (USD) Notes AWS WAF 6.00 1 Web ACL + Rule Route 53 0.50 1 Hosted Zone CodePipeline 1.00 Backend pipeline Amplify (Build + Hosting) 2.72 100 build minutes + 20GB transfer CloudWatch 2.80 5GB logs + 3 alarms IoT Core 1.00 10,000 messages CodeBuild 0.00 Free tier Lambda 0.22 25,000 invocations API Gateway 0.07 20,000 requests DynamoDB 0.02 On-demand capacity Total: ~14.33 USD/month (~14–16 USD actual cost)\nHardware: $25 one-time (ESP32 and sensors) 7. Risk Assessment Risk Impact Level Likelihood Mitigation PII Exposure (CCCD) Critical High Add 2FA or mask last 4 digits of CCCD Network Disconnection High Medium ESP32 temporarily stores logs and syncs when online Sensor Malfunction High Medium Calibrate periodically, apply signal filtering CI/CD Failure Medium Medium Use staging pipeline and code review for IaC 8. Expected Outcomes Technical: Full-stack IoT–Cloud system with biometric authentication, serverless backend, and DevSecOps automation. Practical: Improves transparency and accountability of enforcement officers. Academic: A graduation project demonstrating mastery of AWS Cloud, IoT, and modern DevOps. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.3-s3-vpc/5.3.2-test-gwe/",
	"title": "Test the Gateway Endpoint",
	"tags": [],
	"description": "",
	"content": "Create S3 bucket Navigate to S3 management console In the Bucket console, choose Create bucket In the Create bucket console Name the bucket: choose a name that hasn\u0026rsquo;t been given to any bucket globally (hint: lab number and your name) Leave other fields as they are (default) Scroll down and choose Create bucket Successfully create S3 bucket. Connect to EC2 with session manager For this workshop, you will use AWS Session Manager to access several EC2 instances. Session Manager is a fully managed AWS Systems Manager capability that allows you to manage your Amazon EC2 instances and on-premises virtual machines (VMs) through an interactive one-click browser-based shell. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys.\nFirst cloud journey Lab for indepth understanding of Session manager.\nIn the AWS Management Console, start typing Systems Manager in the quick search box and press Enter: From the Systems Manager menu, find Node Management in the left menu and click Session Manager: Click Start Session, and select the EC2 instance named Test-Gateway-Endpoint. This EC2 instance is already running in \u0026ldquo;VPC Cloud\u0026rdquo; and will be used to test connectivity to Amazon S3 through the Gateway endpoint you just created (s3-gwe).\nSession Manager will open a new browser tab with a shell prompt: sh-4.2 $\nYou have successfully start a session - connect to the EC2 instance in VPC cloud. In the next step, we will create a S3 bucket and a file in it.\nCreate a file and upload to s3 bucket Change to the ssm-user\u0026rsquo;s home directory by typing cd ~ in the CLI Create a new file to use for testing with the command fallocate -l 1G testfile.xyz, which will create a file of 1GB size named \u0026ldquo;testfile.xyz\u0026rdquo;. Upload file to S3 bucket with command aws s3 cp testfile.xyz s3://your-bucket-name. Replace your-bucket-name with the name of S3 bucket that you created earlier. You have successfully uploaded the file to your S3 bucket. You can now terminate the session.\nCheck object in S3 bucket Navigate to S3 console. Click the name of your s3 bucket In the Bucket console, you will see the file you have uploaded to your S3 bucket Section summary Congratulation on completing access to S3 from VPC. In this section, you created a Gateway endpoint for Amazon S3, and used the AWS CLI to upload an object. The upload worked because the Gateway endpoint allowed communication to S3, without needing an Internet Gateway attached to \u0026ldquo;VPC Cloud\u0026rdquo;. This demonstrates the functionality of the Gateway endpoint as a secure path to S3 without traversing the Public Internet.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.10-week10/",
	"title": "Week 10 Worklog",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 10 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Get acquainted with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ Week 10 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.11-week11/",
	"title": "Week 11 Worklog",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 11 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Get acquainted with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ Week 11 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/1-worklog/1.12-week12/",
	"title": "Week 12 Worklog",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 12 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Get acquainted with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ Week 12 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.3-s3-vpc/",
	"title": "Access S3 from VPC",
	"tags": [],
	"description": "",
	"content": "Using Gateway endpoint In this section, you will create a Gateway eendpoint to access Amazon S3 from an EC2 instance. The Gateway endpoint will allow upload an object to S3 buckets without using the Public Internet. To create an endpoint, you must specify the VPC in which you want to create the endpoint, and the service (in this case, S3) to which you want to establish the connection.\nContent Create gateway endpoint Test gateway endpoint "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.4-s3-onprem/5.4.3-test-endpoint/",
	"title": "Test the Interface Endpoint",
	"tags": [],
	"description": "",
	"content": "Get the regional DNS name of S3 interface endpoint From the Amazon VPC menu, choose Endpoints.\nClick the name of newly created endpoint: s3-interface-endpoint. Click details and save the regional DNS name of the endpoint (the first one) to your text-editor for later use.\nConnect to EC2 instance in \u0026ldquo;VPC On-prem\u0026rdquo; Navigate to Session manager by typing \u0026ldquo;session manager\u0026rdquo; in the search box\nClick Start Session, and select the EC2 instance named Test-Interface-Endpoint. This EC2 instance is running in \u0026ldquo;VPC On-prem\u0026rdquo; and will be used to test connectivty to Amazon S3 through the Interface endpoint we just created. Session Manager will open a new browser tab with a shell prompt: sh-4.2 $\nChange to the ssm-user\u0026rsquo;s home directory with command \u0026ldquo;cd ~\u0026rdquo;\nCreate a file named testfile2.xyz\nfallocate -l 1G testfile2.xyz Copy file to the same S3 bucket we created in section 3.2 aws s3 cp --endpoint-url https://bucket.\u0026lt;Regional-DNS-Name\u0026gt; testfile2.xyz s3://\u0026lt;your-bucket-name\u0026gt; This command requires the \u0026ndash;endpoint-url parameter, because you need to use the endpoint-specific DNS name to access S3 using an Interface endpoint. Do not include the leading \u0026rsquo; * \u0026rsquo; when copying/pasting the regional DNS name. Provide your S3 bucket name created earlier Now the file has been added to your S3 bucket. Let check your S3 bucket in the next step.\nCheck Object in S3 bucket Navigate to S3 console Click Buckets Click the name of your bucket and you will see testfile2.xyz has been added to your bucket "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/3-blogstranslated/",
	"title": "Translated Blogs",
	"tags": [],
	"description": "",
	"content": "Blog 1 - Enhance data visibility with Cribl Search and Amazon Managed Grafana This blog demonstrates how Cribl Search can be combined with Amazon Managed Grafana to increase data visibility. Cribl Search enables direct querying of logs and data without indexes, while Grafana enables visualization into real-time dashboards. This solution helps enterprises monitor cloud infrastructure, manage application performance, and enhance security while optimizing operational costs.\nBlog 2 - Enabling customers to deliver production-ready AI agents at scale The blog post discusses how AWS helps customers deploy production-ready AI agents at scale, ensuring security, reliability, and ease of adoption across multiple industries.\nBlog 3 - Goal-Oriented Growth: Driving AWS Marketplace Success with COSS This blog highlights how AWS Marketplace leverages Commercial Open Source Software (COSS) to drive goal-oriented growth for both customers and sellers. It explains the value of COSS in delivering innovation, flexibility, and faster adoption, while also providing guidance for organizations to align business goals with technology adoption through AWS Marketplace.\nBlog 4 - \u0026hellip; This blog introduces how to start building a data lake in the healthcare sector by applying a microservices architecture. You will learn why data lakes are important for storing and analyzing diverse healthcare data (electronic medical records, lab test data, medical IoT devices…), how microservices help make the system more flexible, scalable, and easier to maintain. The article also guides you through the steps to set up the environment, organize the data processing pipeline, and ensure compliance with security \u0026amp; privacy standards such as HIPAA.\nBlog 5 - \u0026hellip; This blog introduces how to start building a data lake in the healthcare sector by applying a microservices architecture. You will learn why data lakes are important for storing and analyzing diverse healthcare data (electronic medical records, lab test data, medical IoT devices…), how microservices help make the system more flexible, scalable, and easier to maintain. The article also guides you through the steps to set up the environment, organize the data processing pipeline, and ensure compliance with security \u0026amp; privacy standards such as HIPAA.\nBlog 6 - \u0026hellip; This blog introduces how to start building a data lake in the healthcare sector by applying a microservices architecture. You will learn why data lakes are important for storing and analyzing diverse healthcare data (electronic medical records, lab test data, medical IoT devices…), how microservices help make the system more flexible, scalable, and easier to maintain. The article also guides you through the steps to set up the environment, organize the data processing pipeline, and ensure compliance with security \u0026amp; privacy standards such as HIPAA.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.4-s3-onprem/",
	"title": "Access S3 from on-premises",
	"tags": [],
	"description": "",
	"content": "Overview In this section, you will create an Interface endpoint to access Amazon S3 from a simulated on-premises environment. The Interface endpoint will allow you to route to Amazon S3 over a VPN connection from your simulated on-premises environment.\nWhy using Interface endpoint:\nGateway endpoints only work with resources running in the VPC where they are created. Interface endpoints work with resources running in VPC, and also resources running in on-premises environments. Connectivty from your on-premises environment to the cloud can be provided by AWS Site-to-Site VPN or AWS Direct Connect. Interface endpoints allow you to connect to services powered by AWS PrivateLink. These services include some AWS services, services hosted by other AWS customers and partners in their own VPCs (referred to as PrivateLink Endpoint Services), and supported AWS Marketplace Partner services. For this workshop, we will focus on connecting to Amazon S3. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/4-eventparticipated/",
	"title": "Events Participated",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim for your report, including this warning.\nIn this section, you should list and describe in detail the events you have participated in during your internship or work experience.\nEach event should be presented in the format Event 1, Event 2, Event 3…, along with the following details:\nEvent name Date and time Location (if applicable) Your role in the event (attendee, event support, speaker, etc.) A brief description of the event’s content and main activities Outcomes or value gained (lessons learned, new skills, contribution to the team/project) This listing helps demonstrate your actual participation as well as the soft skills and experience you have gained from each event. During my internship, I participated in two events. Each one was a memorable experience that provided new, interesting, and useful knowledge, along with gifts and wonderful moments.\nEvent 1 Event Name: GenAI-powered App-DB Modernization workshop\nDate \u0026amp; Time: 09:00, August 13, 2025\nLocation: 26th Floor, Bitexco Tower, 02 Hai Trieu Street, Saigon Ward, Ho Chi Minh City\nRole: Attendee\nEvent 2 Event Name: GenAI-powered App-DB Modernization workshop\nDate \u0026amp; Time: 09:00, August 13, 2025\nLocation: 26th Floor, Bitexco Tower, 02 Hai Trieu Street, Saigon Ward, Ho Chi Minh City\nRole: Attendee\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.4-s3-onprem/5.4.4-dns-simulation/",
	"title": "On-premises DNS Simulation",
	"tags": [],
	"description": "",
	"content": "AWS PrivateLink endpoints have a fixed IP address in each Availability Zone where they are deployed, for the life of the endpoint (until it is deleted). These IP addresses are attached to Elastic Network Interfaces (ENIs). AWS recommends using DNS to resolve the IP addresses for endpoints so that downstream applications use the latest IP addresses when ENIs are added to new AZs, or deleted over time.\nIn this section, you will create a forwarding rule to send DNS resolution requests from a simulated on-premises environment to a Route 53 Private Hosted Zone. This section leverages the infrastructure deployed by CloudFormation in the Prepare the environment section.\nCreate DNS Alias Records for the Interface endpoint Navigate to the Route 53 management console (Hosted Zones section). The CloudFormation template you deployed in the Prepare the environment section created this Private Hosted Zone. Click on the name of the Private Hosted Zone, s3.us-east-1.amazonaws.com: Create a new record in the Private Hosted Zone: Record name and record type keep default options Alias Button: Click to enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Choose endpoint: Paste the Regional VPC Endpoint DNS name from your text editor (you saved when doing section 4.3) Click Add another record, and add a second record using the following values. Click Create records when finished to create both records. Record name: *. Record type: keep default value (type A) Alias Button: Click to enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Choose endpoint: Paste the Regional VPC Endpoint DNS name from your text editor The new records appear in the Route 53 console:\nCreate a Resolver Forwarding Rule Route 53 Resolver Forwarding Rules allow you to forward DNS queries from your VPC to other sources for name resolution. Outside of a workshop environment, you might use this feature to forward DNS queries from your VPC to DNS servers running on-premises. In this section, you will simulate an on-premises conditional forwarder by creating a forwarding rule that forwards DNS queries for Amazon S3 to a Private Hosted Zone running in \u0026ldquo;VPC Cloud\u0026rdquo; in-order to resolve the PrivateLink interface endpoint regional DNS name.\nFrom the Route 53 management console, click Inbound endpoints on the left side bar In the Inbound endpoints console, click the ID of the inbound endpoint Copy the two IP addresses listed to your text editor From the Route 53 menu, choose Resolver \u0026gt; Rules, and click Create rule: In the Create rule console: Name: myS3Rule Rule type: Forward Domain name: s3.us-east-1.amazonaws.com VPC: VPC On-prem Outbound endpoint: VPCOnpremOutboundEndpoint Target IP Addresses: Enter both IP addresses from your text editor (inbound endpoint addresses) and then click Submit You have successfully created resolver forwarding rule.\nTest the on-premises DNS Simulation Connect to Test-Interface-Endpoint EC2 instance with Session manager Test DNS resolution. The dig command will return the IP addresses assigned to the VPC Interface endpoint running in VPC Cloud (your IP\u0026rsquo;s will be different): dig +short s3.us-east-1.amazonaws.com The IP addresses returned are the VPC endpoint IP addresses, NOT the Resolver IP addresses you pasted from your text editor. The IP addresses of the Resolver endpoint and the VPC endpoint look similar because they are all from the VPC Cloud CIDR block.\nNavigate to the VPC menu (Endpoints section), select the S3 Interface endpoint. Click the Subnets tab and verify that the IP addresses returned by Dig match the VPC endpoint: Return to your shell and use the AWS CLI to test listing your S3 buckets: aws s3 ls --endpoint-url https://s3.us-east-1.amazonaws.com Terminate your Session Manager session: In this section you created an Interface endpoint for Amazon S3. This endpoint can be reached from on-premises through Site-to-Site VPN or AWS Direct Connect. Route 53 Resolver outbound endpoints simulated forwarding DNS requests from on-premises to a Private Hosted Zone running the cloud. Route 53 inbound Endpoints recieved the resolution request and returned a response containing the IP addresses of the VPC interface endpoint. Using DNS to resolve the endpoint IP addresses provides high availability in-case of an Availability Zone outage.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.5-policy/",
	"title": "VPC Endpoint Policies",
	"tags": [],
	"description": "",
	"content": "When you create an interface or gateway endpoint, you can attach an endpoint policy to it that controls access to the service to which you are connecting. A VPC endpoint policy is an IAM resource policy that you attach to an endpoint. If you do not attach a policy when you create an endpoint, AWS attaches a default policy for you that allows full access to the service through the endpoint.\nYou can create a policy that restricts access to specific S3 buckets only. This is useful if you only want certain S3 Buckets to be accessible through the endpoint.\nIn this section you will create a VPC endpoint policy that restricts access to the S3 bucket specified in the VPC endpoint policy.\nConnect to an EC2 instance and verify connectivity to S3 Start a new AWS Session Manager session on the instance named Test-Gateway-Endpoint. From the session, verify that you can list the contents of the bucket you created in Part 1: Access S3 from VPC: aws s3 ls s3://\\\u0026lt;your-bucket-name\\\u0026gt; The bucket contents include the two 1 GB files uploaded in earlier.\nCreate a new S3 bucket; follow the naming pattern you used in Part 1, but add a \u0026lsquo;-2\u0026rsquo; to the name. Leave other fields as default and click create Successfully create bucket\nNavigate to: Services \u0026gt; VPC \u0026gt; Endpoints, then select the Gateway VPC endpoint you created earlier. Click the Policy tab. Click Edit policy. The default policy allows access to all S3 Buckets through the VPC endpoint.\nIn Edit Policy console, copy \u0026amp; Paste the following policy, then replace yourbucketname-2 with your 2nd bucket name. This policy will allow access through the VPC endpoint to your new bucket, but not any other bucket in Amazon S3. Click Save to apply the policy. { \u0026#34;Id\u0026#34;: \u0026#34;Policy1631305502445\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Stmt1631305501021\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::yourbucketname-2\u0026#34;, \u0026#34;arn:aws:s3:::yourbucketname-2/*\u0026#34; ], \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34; } ] } Successfully customize policy\nFrom your session on the Test-Gateway-Endpoint instance, test access to the S3 bucket you created in Part 1: Access S3 from VPC aws s3 ls s3://\u0026lt;yourbucketname\u0026gt; This command will return an error because access to this bucket is not permitted by your new VPC endpoint policy:\nReturn to your home directory on your EC2 instance cd~ Create a file fallocate -l 1G test-bucket2.xyz Copy file to 2nd bucket aws s3 cp test-bucket2.xyz s3://\u0026lt;your-2nd-bucket-name\u0026gt; This operation succeeds because it is permitted by the VPC endpoint policy.\nThen we test access to the first bucket by copy the file to 1st bucket aws s3 cp test-bucket2.xyz s3://\u0026lt;your-1st-bucket-name\u0026gt; This command will return an error because access to this bucket is not permitted by your new VPC endpoint policy.\nPart 3 Summary: In this section, you created a VPC endpoint policy for Amazon S3, and used the AWS CLI to test the policy. AWS CLI actions targeted to your original S3 bucket failed because you applied a policy that only allowed access to the second bucket you created. AWS CLI actions targeted for your second bucket succeeded because the policy allowed them. These policies can be useful in situations where you need to control access to resources through VPC endpoints.\n"
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/",
	"title": "Workshop",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nSecure Hybrid Access to S3 using VPC Endpoints Overview AWS PrivateLink provides private connectivity to AWS services from VPCs and your on-premises networks, without exposing your traffic to the Public Internet.\nIn this lab, you will learn how to create, configure, and test VPC endpoints that enable your workloads to reach AWS services without traversing the Public Internet.\nYou will create two types of endpoints to access Amazon S3: a Gateway VPC endpoint, and an Interface VPC endpoint. These two types of VPC endpoints offer different benefits depending on if you are accessing Amazon S3 from the cloud or your on-premises location\nGateway - Create a gateway endpoint to send traffic to Amazon S3 or DynamoDB using private IP addresses.You route traffic from your VPC to the gateway endpoint using route tables. Interface - Create an interface endpoint to send traffic to endpoint services that use a Network Load Balancer to distribute traffic. Traffic destined for the endpoint service is resolved using DNS. Content Workshop overview Prerequiste Access S3 from VPC Access S3 from On-premises VPC Endpoint Policies (Bonus) Clean up "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/5-workshop/5.6-cleanup/",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": "Congratulations on completing this workshop! In this workshop, you learned architecture patterns for accessing Amazon S3 without using the Public Internet.\nBy creating a gateway endpoint, you enabled direct communication between EC2 resources and Amazon S3, without traversing an Internet Gateway. By creating an interface endpoint you extended S3 connectivity to resources running in your on-premises data center via AWS Site-to-Site VPN or Direct Connect. clean up Navigate to Hosted Zones on the left side of Route 53 console. Click the name of s3.us-east-1.amazonaws.com zone. Click Delete and confirm deletion by typing delete. Disassociate the Route 53 Resolver Rule - myS3Rule from \u0026ldquo;VPC Onprem\u0026rdquo; and Delete it. Open the CloudFormation console and delete the two CloudFormation Stacks that you created for this lab: PLOnpremSetup PLCloudSetup Delete S3 buckets Open S3 console Choose the bucket we created for the lab, click and confirm empty. Click delete and confirm delete. "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/6-self-evaluation/",
	"title": "Self-Assessment",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim into your report, including this warning.\nDuring my internship at [Company/Organization Name] from [start date] to [end date], I had the opportunity to learn, practice, and apply the knowledge acquired in school to a real-world working environment.\nI participated in [briefly describe the main project or task], through which I improved my skills in [list skills: programming, analysis, reporting, communication, etc.].\nIn terms of work ethic, I always strived to complete tasks well, complied with workplace regulations, and actively engaged with colleagues to improve work efficiency.\nTo objectively reflect on my internship period, I would like to evaluate myself based on the following criteria:\nNo. Criteria Description Good Fair Average 1 Professional knowledge \u0026amp; skills Understanding of the field, applying knowledge in practice, proficiency with tools, work quality ✅ ☐ ☐ 2 Ability to learn Ability to absorb new knowledge and learn quickly ☐ ✅ ☐ 3 Proactiveness Taking initiative, seeking out tasks without waiting for instructions ✅ ☐ ☐ 4 Sense of responsibility Completing tasks on time and ensuring quality ✅ ☐ ☐ 5 Discipline Adhering to schedules, rules, and work processes ☐ ☐ ✅ 6 Progressive mindset Willingness to receive feedback and improve oneself ☐ ✅ ☐ 7 Communication Presenting ideas and reporting work clearly ☐ ✅ ☐ 8 Teamwork Working effectively with colleagues and participating in teams ✅ ☐ ☐ 9 Professional conduct Respecting colleagues, partners, and the work environment ✅ ☐ ☐ 10 Problem-solving skills Identifying problems, proposing solutions, and showing creativity ☐ ✅ ☐ 11 Contribution to project/team Work effectiveness, innovative ideas, recognition from the team ✅ ☐ ☐ 12 Overall General evaluation of the entire internship period ✅ ☐ ☐ Needs Improvement Strengthen discipline and strictly comply with the rules and regulations of the company or any organization Improve problem-solving thinking Enhance communication skills in both daily interactions and professional contexts, including handling situations effectively "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/7-feedback/",
	"title": "Sharing and Feedback",
	"tags": [],
	"description": "",
	"content": " ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nHere, you can freely share your personal opinions about your experience participating in the First Cloud Journey program. This will help the FCJ team improve any shortcomings based on the following aspects:\nOverall Evaluation 1. Working Environment\nThe working environment is very friendly and open. FCJ members are always willing to help whenever I encounter difficulties, even outside working hours. The workspace is tidy and comfortable, helping me focus better. However, I think it would be nice to have more social gatherings or team bonding activities to strengthen relationships.\n2. Support from Mentor / Team Admin\nThe mentor provides very detailed guidance, explains clearly when I don’t understand, and always encourages me to ask questions. The admin team supports administrative tasks, provides necessary documents, and creates favorable conditions for me to work effectively. I especially appreciate that the mentor allows me to try and solve problems myself instead of just giving the answer.\n3. Relevance of Work to Academic Major\nThe tasks I was assigned align well with the knowledge I learned at university, while also introducing me to new areas I had never encountered before. This allowed me to both strengthen my foundational knowledge and gain practical skills.\n4. Learning \u0026amp; Skill Development Opportunities\nDuring the internship, I learned many new skills such as using project management tools, teamwork skills, and professional communication in a corporate environment. The mentor also shared valuable real-world experiences that helped me better plan my career path.\n5. Company Culture \u0026amp; Team Spirit\nThe company culture is very positive: everyone respects each other, works seriously but still keeps things enjoyable. When there are urgent projects, everyone works together and supports one another regardless of their position. This made me feel like a real part of the team, even as an intern.\n6. Internship Policies / Benefits\nThe company provides an internship allowance and offers flexible working hours when needed. In addition, having the opportunity to join internal training sessions is a big plus.\nAdditional Questions What did you find most satisfying during your internship? What do you think the company should improve for future interns? If recommending to a friend, would you suggest they intern here? Why or why not? Suggestions \u0026amp; Expectations Do you have any suggestions to improve the internship experience? Would you like to continue this program in the future? Any other comments (free sharing): "
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bacdang2k4.github.io/fcj-worklog-web/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]